# ChatGPT query
# Write a github actions file for my Rust project.
# The workflow should run cargo upgrade, build the code, test code, run cargo clippy,  run cargo audit, check for unused dependencies using cargo-udeps.
# Cargo-udeps, cargo-audit, cargo-edit must be installed in a single command line before running it.
# Cargo clippy command must fail if there is at least one warning in output.
# Cargo audit command  must fail if there is at least one warning in output. Cargo udeps command must fail if there is at least one warning in output.

name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - release

env:
  CARGO_TERM_COLOR: always

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo_v5_azero
          restore-keys: ${{ runner.os }}-cargo_v5_azero

      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - name: Install cargo-edit, cargo-udeps, and cargo-audit
        run: |
          cargo install --locked cargo-edit || true
          cargo install --locked cargo-udeps || true
          cargo install --locked cargo-audit || true

  build-install-deps:
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo_v5_azero
          restore-keys: ${{ runner.os }}-cargo_v5_azero

      - name: Set up rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust_v5_azero"
          cache-on-failure: "true"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      # - name: Upgrade dependencies
      #   run: |
      #     cargo upgrade --verbose
      #     cargo generate-lockfile

      - name: Build stable
        run: |
          cargo build

      - name: Build nightly
        run: |
          cargo +nightly build

  test-audit-udeps:
    needs: build-install-deps
    runs-on: ubuntu-latest

    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          # key: ${{ runner.os }}-cargo_v1-${{ hashFiles('**/Cargo.lock') }}
          key: ${{ runner.os }}-cargo_v5_azero
          restore-keys: ${{ runner.os }}-cargo_v5_azero

      - name: Set up rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust_v5_azero"
          cache-on-failure: "true"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - name: Test
        run: |
          if ! cargo test -q; then
            exit 1
          fi

      - name: Run cargo clippy
        run: |
          clippy_warnings=$(cargo clippy -q)
          if [ -n "$clippy_warnings" ]; then
            echo "$clippy_warnings"
            exit 1
          fi

      # - name: Run cargo audit
      #   run: |
      #     rm -rf ~/.cargo/advisory-db
      #     audit_warnings=$(cargo audit -q)
      #     if [ -n "$audit_warnings" ]; then
      #       echo "$audit_warnings"
      #       exit 1
      #     fi

      # this does not work without nightly toolchain in CI
      - name: Check for unused dependencies using cargo-udeps
        run: |
          udeps_warnings=$(cargo +nightly udeps -q)
          if [ "$udeps_warnings" != "All deps seem to have been used." ]; then
            echo "$udeps_warnings"
            exit 1
          fi

  build-docker-exchanges:
    needs: test-audit-udeps
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: 0xfar5eer/rs-exchanges-parser

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./rs-exchanges-parser.Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-docker-subscan:
    needs: build-docker-exchanges
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: 0xfar5eer/rs-subscan-parser

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./rs-subscan-parser.Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-docker-telegram:
    needs: build-docker-subscan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: 0xfar5eer/rs-telegram-feed-bot

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./rs-telegram-feed-bot.Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-docker-telegram
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          overwrite: true
          # rm: true
          source: docker-compose.yml
          target: ~/docker_AzeroTradeFeed/

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~/docker_AzeroTradeFeed/
            rm init.sh
            touch init.sh
            echo "export MONGODB_USERNAME='${{ secrets.MONGODB_USERNAME }}'" >> init.sh
            echo "export MONGODB_PASSWORD='${{ secrets.MONGODB_PASSWORD }}'" >> init.sh
            echo "export MONGODB_DATABASE='${{ vars.MONGODB_DATABASE }}'" >> init.sh
            echo "export MONGODB_COLLECTION_EXCHANGES='${{ vars.MONGODB_COLLECTION_EXCHANGES }}'" >> init.sh
            echo "export MONGODB_COLLECTION_SUBSCAN='${{ vars.MONGODB_COLLECTION_SUBSCAN }}'" >> init.sh
            echo "export MONGODB_COLLECTION_VALIDATOR='${{ vars.MONGODB_COLLECTION_VALIDATOR }}'" >> init.sh
            echo "export MONGODB_COLLECTION_IDENTITY='${{ vars.MONGODB_COLLECTION_IDENTITY }}'" >> init.sh
            echo "export MONGODB_COLLECTION_TELEGRAM='${{ vars.MONGODB_COLLECTION_TELEGRAM }}'" >> init.sh
            echo "export TELEGRAM_BOT_FATHER_KEY='${{ secrets.TELEGRAM_BOT_FATHER_KEY }}'" >> init.sh
            echo "export TELEGRAM_CHANNEL_ID='${{ secrets.TELEGRAM_CHANNEL_ID }}'" >> init.sh
            chmod +x init.sh
            . ./init.sh         
            docker-compose down
            docker-compose pull
            docker-compose up -d
